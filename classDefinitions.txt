#ifndef GRAPHELEMENT_H
#define GRAPHELEMENT_H

using namespace std;

class GraphElement {
	public:
		GraphElement (int, int);
		void SDL_graph_function (int x_pos, int y_pos);
	private:
		int x_pos;
		int y_pos;

};

#endif


#ifndef PLAYER_H
#define PLAYER_H

using namespace std;

class Player : GraphElement (x_pos, y_pos) {
	public:
		Player ();
		Sprite for (string, string);
		Sprite slightR (string, int, int);
		Sprite sharpR (string, int, int);
		Sprite slightL (string, int, int);
		Sprite sharpR (string, int, int);
		Counter scoreCntr (int);
		Counter healthCntr (int);
		Counter ammoCntr (int);
		Counter livesCntr (int);
		int getX ();
		int getY ();
		int getXVel ();
		int getYVel();
	private:
		int x_vel;
		int y_vel;
};

#endif


#ifndef SPRITE_H
#define SPRITE_H

using namespace std;

class Sprite {
	public:
		Sprite (string, string);
		void blit(int, int);
	private:
		static char *imageFile;
		SDL_Rect clipRegion;
};

#endif


#ifndef COUNTER_H
#define COUNTER_H

using namespace std;

class Counter {
	public:
		Counter (int);
		void setVal ();
		int getVal ();
	private:
		int cntrVal;
};

#endif


#ifndef ENEMY_H
#define ENEMY_H

using namespace std;

class Enemy {
	public:
		Player ();
		Sprite for (string, string);
		Sprite slightR (string, int, int);
		Sprite sharpR (string, int, int);
		Sprite slightL (string, int, int);
		Sprite sharpR (string, int, int);
		Counter healthCntr;
		int getX ();
		int getY ();
		int getXVel ();
		int getYVel();		
	private:

};

#endif


#ifndef BOSS_H
#define BOSS_H

using namespace std;

class Boss {
	public:
		
	private:

};

#endif


#ifndef BACKGROUND_H
#define BACKGROUND_H

using namespace std;

class Background {
	public:
		Background (string);
	private:
		string fileName;
};

#endif


#ifndef LEVEL_H
#define LEVEL_H

using namespace std;

class Level {
	public:
		Level (int, string);
		Background levelBack (string);
	private:
		int lvl;
		string bgFile;
};

#endif
